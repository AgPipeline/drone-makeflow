name: Building Docker container
on:
  push:
    branches:
      - master
      - develop
      - split_workflows
  pull_request:
    branches:
      - master
      - develop
    tags:
      - v*

jobs:
  app_testing:
    runs-on: ubuntu-latest
    name: Test simple apps (not workflow apps)
    strategy:
      matrix:
        app: [betydb2geojson, shp2geojson, soilmask, plotclip, find_files2json, canopycover, merge_csv]
        include:
          - app: betydb2geojson
            parameter_json: .github/workflows/app_testing.json
            test_results: if [[ -f "outputs/plots.geojson" ]]; then echo "Test betydb2geojson success"; exit 0; else echo "App failed - betydb2geojson"; exit 1; fi;
          - app: shp2geojson
            tar_gz_file: https://de.cyverse.org/dl/d/3C8A23C0-F77A-4598-ADC4-874EB265F9B0/scif_test_data.tar.gz
            parameter_json: .github/workflows/app_testing.json
            test_results: if [[ -f "outputs/plots.geojson" ]]; then echo "Test shp2geojson success"; exit 0; else echo "App failed - shp2geojson"; exit 1; fi;
          - app: soilmask
            tar_gz_file: https://de.cyverse.org/dl/d/3C8A23C0-F77A-4598-ADC4-874EB265F9B0/scif_test_data.tar.gz
            parameter_json: .github/workflows/app_testing.json
            test_results: if [[ -f "outputs/orthomosaicmask.tif" ]]; then echo "Test soilmask success"; exit 0; else echo "App failed - soilmask"; exit 1; fi;
          - app: plotclip
            tar_gz_file: https://de.cyverse.org/dl/d/BC328D44-621B-41B6-A662-0CD7F2D4C0EE/ci_plotclip_test_data.tar.gz
            parameter_json: .github/workflows/app_testing.json
            test_results: chmod +x .github/workflows/check_plotclip_app.sh && ./.github/workflows/check_plotclip_app.sh ${PWD}/outputs
          - app: find_files2json
            tar_gz_file: https://de.cyverse.org/dl/d/ADBEEBDE-E000-4FCB-AE74-62047ED4DD8E/ci_find_files2json_test_data.tar.gz
            parameter_json: .github/workflows/app_testing.json
            test_results: if [[ -f "outputs/canopy_cover_files.json" ]]; then echo "Test find_files2json success"; exit 0; else echo "App failed - find_files2json"; exit 1; fi;
          - app: canopycover
            tar_gz_file: https://de.cyverse.org/dl/d/A3C6E964-B01A-49B1-B018-08E1DD248EB2/ci_canopycover_test_data.tar.gz
            parameter_json: .github/workflows/app_testing.json
            extra_docker_options: -v `pwd`/canopy_cover_files.json:/scif/apps/src/canopy_cover_files.json
            test_results: chmod +x .github/workflows/check_canopycover_app.sh && ./.github/workflows/check_canopycover_app.sh ${PWD}
          - app: merge_csv
            tar_gz_file: https://de.cyverse.org/dl/d/71E146AE-A959-4EF0-A1DE-760F88F21694/ci_merge_csv_test_data.tar.gz
            parameter_json: .github/workflows/app_testing.json
            test_results: if [[ "$(cat outputs/canopycover.csv|wc -l| tr -d '[:space:]')" == "58" ]]; then echo "Test merge_csv success"; exit 0; else echo "App failed - merge_csv"; exit 1; fi;
    steps:
      - name: Fetch source code
        uses: actions/checkout@v2
        id: fetch-source
      - name: Build docker image
        run: docker build -t scif_test:latest ./
      - name: Create folders
        run: |
             mkdir outputs
             mkdir checkpoints
      - name: Download testing data
        if: ${{ matrix.tar_gz_file }}
        run: |
             curl -X GET ${{ matrix.tar_gz_file }} > scif_test_data.tar.gz
             tar xvzf scif_test_data.tar.gz -C "./"
             ls -l
      - name: Run test
        run: docker run --rm -v ${PWD}:/input -v ${PWD}/outputs:/output -v ${PWD}/checkpoints:/scif/data/${{ matrix.app }} -v ${PWD}/${{ matrix.parameter_json }}:/scif/apps/src/jx-args.json ${{ matrix.extra_docker_options }} scif_test:latest run ${{ matrix.app }}
      - name: Folder listing
        run: |
             echo "Current folder"
             ls -l
             echo "Outputs folder"
             ls -l outputs
             echo "Checkpoints folder"
             ls -l checkpoints
      - name: Check results
        run: ${{ matrix.test_results }}
      - name: Run cleanup
        run: docker run --rm -v ${PWD}:/input -v ${PWD}/outputs:/output -v ${PWD}/${{ matrix.parameter_json }}:/scif/apps/src/jx-args.json ${{ matrix.extra_docker_options }} scif_test:latest run ${{ matrix.app }} --clean
      - name: Confirm cleanup
        run: |
             echo "Current folder"
             ls -l
             echo "Output folder"
             ls -l outputs
             echo "Checkpoint folder"
             ls -l checkpoints

  workflow_testing:
    runs-on: ubuntu-latest
    name: Test workflows
    strategy:
      matrix:
        app: [canopycover]
        include:
          - app: canopycover
            tar_gz_file: https://de.cyverse.org/dl/d/3C8A23C0-F77A-4598-ADC4-874EB265F9B0/scif_test_data.tar.gz
            parameter_json: .github/workflows/app_testing.json
            canopycover_docker_options: -v `pwd`/canopy_cover_files.json:/scif/apps/src/canopy_cover_files.json
    steps:
      - name: Fetch source code
        uses: actions/checkout@v2
        id: fetch-source
      - name: Build docker image
        run: docker build -t scif_test:latest ./
      - name: Create folders
        run: |
              nkdir -p inputs
              mkdir -p outputs
      - name: Download testing data
        if: ${{ matrix.tar_gz_file }}
        run: |
             curl -X GET ${{ matrix.tar_gz_file }} > scif_test_data.tar.gz
             tar xvzf scif_test_data.tar.gz -C "./inputs/"
             echo "Current folder"
             ls -l
             echo "Inputs folder"
             ls -l inputs/
      - name: Shapefile to plots
        run: docker run --rm -v ${PWD}:/input -v ${PWD}/outputs:/output -v ${PWD}/${{ matrix.parameter_json }}:/scif/apps/src/jx-args.json ${{ matrix.extra_docker_options }} scif_test:latest run shp2geojson
      - name: Run Soilmask
        run: docker run --rm -v ${PWD}:/input -v ${PWD}/outputs:/output -v ${PWD}/${{ matrix.parameter_json }}:/scif/apps/src/jx-args.json ${{ matrix.extra_docker_options }} scif_test:latest run soilmask
      - name: Run Soilmask
        run: docker run --rm -v ${PWD}:/input -v ${PWD}/outputs:/output -v ${PWD}/${{ matrix.parameter_json }}:/scif/apps/src/jx-args.json ${{ matrix.extra_docker_options }} scif_test:latest run plotclip
      - name: Find plotclip image files
        run: docker run --rm -v ${PWD}:/input -v ${PWD}/outputs:/output -v ${PWD}/${{ matrix.parameter_json }}:/scif/apps/src/jx-args.json ${{ matrix.extra_docker_options }} scif_test:latest run find_files2json
      - name: Run canopy cover
        run: docker run --rm -v ${PWD}:/input -v ${PWD}/outputs:/output -v ${PWD}/${{ matrix.parameter_json }}:/scif/apps/src/jx-args.json ${{ matrix.canopycover_docker_options }} scif_test:latest run canopycover
      - name: Merge CSV files
        run: docker run --rm -v ${PWD}:/input -v ${PWD}/outputs:/output -v ${PWD}/${{ matrix.parameter_json }}:/scif/apps/src/jx-args.json ${{ matrix.extra_docker_options }} scif_test:latest run merge_csv
      - name: Check CSV results
        run: if [[ "$(cat outputs/canopycover.csv|wc -l| tr -d '[:space:]')" == "58" ]]; then echo "Canopy Coverr success"; exit 0; else echo "Workflow failed - canopy cover"; exit 1; fi;
