name: Building Docker container
on:
  push:
    branches:
      - master
      - develop
      - docker_build_workflow
  pull_request:
    branches:
      - master
      - develop
    tags:
      - v*

jobs:
  build_docker:
    runs-on: ubuntu-latest
    name: Build docker container
    steps:
      - name: Fetch source code
        uses: actions/checkout@v2
        id: fetch-source
      - name: Build docker image
        run: docker build -t scif_test:latest ./
      - name: Compress docker image
        run: docker save scif_test:latest | gzip -7 -c - > scif_test_image.tar.gz
      - name: Upload docker image
        uses: actions/upload-artifact@v2
        with:
          name: scif_test_image
          path: scif_test_image.tar.gz

  app_testing:
    runs-on: ubuntu-latest
    needs: build_docker
    name: Test simple apps (not workflow apps)
    strategy:
      matrix:
          app: [betydb2geojson, shp2geojson]
          include:
            - app: betydb2geojson
              parameters: https://terraref.ncsa.illinois.edu/bety /mnt/bety_plots.geojson
              test_results: if [[ -f "bety_plots.geojson" ]]; then echo "Test betydb2geojson success"; exit 0; else echo "App failed - betydb2geojson"; exit 1; fi;
            - app: shp2geojson
              parameters: plot_shapes.shp /mnt/shp_plots.geojson
              test_results: if [[ -f "shp_plots.geojson" ]]; then echo "Test shp2geojson success"; exit 0; else echo "App failed - shp2geojson"; exit 1; fi;
    steps:
      - name: Download docker image
        uses: actions/download-artifact@v2
        with:
          name: scif_test_image
          path: ./
      - name: Load docker image
        run: |
             ls -l
             gunzip scif_test_image.tar.gz
             docker load --input scif_test_image.tar
             docker images
      - name: Shp2geojson download check
        if: ${{ matrix.app  == 'shp2geojson' }}
        run: |
             curl -X GET https://de.cyverse.org/dl/d/3C8A23C0-F77A-4598-ADC4-874EB265F9B0/scif_test_data.tar.gz > scif_test_data.tar.gz
             tar xvzf scif_test_data.tar.gz -C "./"
             ls -l
      - name: Run test
        run: docker run --rm -v `pwd`:/mnt -v `pwd`:/scif/data/odm_workflow/images scif_test:latest run ${{ matrix.app }} ${{ matrix.parameters }}
      - name: Folder listing
        run: ls -l
      - name: Check results
        run: ${{ matrix.test_results }}

  workflow_testing:
    runs-on: ubuntu-latest
    needs: build_docker
    name: Testing workflows
    strategy:
      matrix:
          app: [short_workflow, odm_workflow]
          include:
            - app: short_workflow
              data_file_archive_url: "https://de.cyverse.org/dl/d/3C8A23C0-F77A-4598-ADC4-874EB265F9B0/scif_test_data.tar.gz"
              docker_params: -v "${PWD}/inputs:/scif/data/odm_workflow/images" -v "${PWD}/outputs:/output" -v "${PWD}/checkpoints:/scif/data/short_workflow"
              parameters: orthomosaic plot_shapes.shp
              result_check_script: "short_workflow_check.sh"
              clean_leftover_output_count: "9"
              clean_leftover_makeflow_count: "2"
            - app: odm_workflow
              data_file_archive_url: "https://de.cyverse.org/dl/d/3C8A23C0-F77A-4598-ADC4-874EB265F9B0/scif_odm_test_data.tar.gz"
              docker_params: -v /var/run/docker.sock:/var/run/docker.sock -v "${PWD}/inputs:/scif/data/odm_workflow/images" -v my_output:/output -v "${PWD}/checkpoints:/scif/data/odm_workflow" -e INPUT_VOLUME=my_input -e OUTPUT_VOLUME=my_output -e "INPUT_IMAGE_FOLDER=/images" -e "OUTPUT_FOLDER=/output"
              parameters: plot_shapes.shp my_input my_output
              result_check_script: "odm_workflow_check.sh"
              clean_leftover_output_count: "42"
              clean_leftover_makeflow_count: "0"
    steps:
      - name: Fetch source code
        uses: actions/checkout@v2
        id: fetch-source
      - name: Prepare folders
        run: |
             mkdir ./inputs
             mkdir ./outputs
             mkdir ./checkpoints
      - name: Download docker image
        uses: actions/download-artifact@v2
        with:
          name: scif_test_image
          path: ./
      - name: Decompress and load docker image
        run: |
             ls -l
             gunzip scif_test_image.tar.gz
             docker load --input scif_test_image.tar
             docker images
      - name: Download testing data files
        run: |
             curl -X GET ${{ matrix.data_file_archive_url }} > test_data.tar.gz
             tar xvzf test_data.tar.gz -C "./inputs/"
      - name: Clean inputs folder
        if: ${{ matrix.app == 'odm_workflow' }}
        run: |
             if [[ -f "./inputs/orthomosaic.tif" ]]; then echo "Removing existing orthomosaic.tif" && rm -vf "./inputs/orthomosaic.tif"; fi
             echo "Current folder" && ls -l
             echo "Inputs folder" && ls -l ./inputs/*
      - name: Docker preparation
        if: ${{ matrix.app == 'odm_workflow' }}
        run: |
             docker volume create my_input
             docker volume create my_output
             docker run --rm -v "${PWD}/inputs:/images" -v my_input:/input --entrypoint bash scif_test:latest -c 'cp -r /images/* /input'
      - name: Run test
        run: docker run --rm ${{ matrix.docker_params }} scif_test:latest run ${{ matrix.app }} ${{ matrix.parameters }}
      - name: Docker post-processing
        if: ${{ matrix.app == 'odm_workflow' }}
        run:  |
              docker run --rm -v my_output:/results -v "${PWD}/outputs:/output" --entrypoint bash scif_test:latest -c 'cp -r /results/* /output/'
              docker run --rm -v my_input:/input -v my_output:/output --entrypoint bash scif_test:latest -c 'rm -r /input/* && rm -r /output/*'
      - name: Show outputs folder
        run: |
             echo "Outputs folder" && ls -l ./outputs
             echo "Checkpoints folder" && ls -l ./checkpoints
      - name: Check outputs
        run: |
             chmod +x "./.github/workflows/${{ matrix.result_check_script }}"
             "./.github/workflows/${{ matrix.result_check_script }}"
      - name: Check artifacts
        run: |
             WFL=$(find ./checkpoints | grep "makeflowlog" | wc -l| tr -d '[:space:]')
             if [[ "$WFL" == "2" ]]; then echo "The correct number of makeflow log files were found ($WFL)"; else "Makeflow log count error: $WFL"; exit 2; fi
      - name: Clean
        run: docker run --rm ${{ matrix.docker_params }} scif_test:latest run ${{ matrix.app }} ${{ matrix.parameters }} --clean
      - name: Check clean output
        run: |
              echo "Outputs folder" && ls -l ./outputs
              RFL=$(find ./outputs | wc -l| tr -d '[:space:]')
              if [[ "$RFL" == ${{ matrix.clean_leftover_output_count }} ]]; then echo "Output has been cleaned up"; else echo "Output is not completely cleaned up: $RFL remaining"; exit 3; fi
      - name: Check clean makeflow artifacts
        run: |
              echo "Checkpoints folder" && ls -l ./checkpoints
              RFL=$(find ./checkpoints | wc -l| tr -d '[:space:]')
              if [[ "$RFL" == ${{ matrix.clean_leftover_makeflow_count }} ]]; then echo "Makeflow artifacts has been cleaned up"; else echo "Makeflow artifacts not completely cleaned up: $RFL remaining"; exit 3; fi

  artifact_cleanup:
    runs-on: ubuntu-latest
    needs: [app_testing, workflow_testing]
    name: Cleanup artifacts upon success
    steps:
      - name: Remove docker artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: scif_test_image
